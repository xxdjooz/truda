// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'truda_database/entity/truda_aic_entity.dart';
import 'truda_database/entity/truda_call_entity.dart';
import 'truda_database/entity/truda_conversation_entity.dart';
import 'truda_database/entity/truda_her_entity.dart';
import 'truda_database/entity/truda_msg_entity.dart';
import 'truda_database/entity/truda_order_entity.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 5801323278618565369),
      name: 'NewHitaOrderEntity',
      lastPropertyId: const IdUid(13, 8748831353225298135),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 5984136341120721055),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 6654804423479040085),
            name: 'userId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 511528472449000037),
            name: 'orderNo',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 8663324543209939486),
            name: 'productId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 5067738032996008672),
            name: 'price',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 5244279085741581265),
            name: 'currency',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 5330302876823427671),
            name: 'payType',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 1398873006948748992),
            name: 'type',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 7303599399282208651),
            name: 'payTime',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 4922394321321089243),
            name: 'orderCreateTime',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 1673415854795397138),
            name: 'orderStatus',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 7346142556627946084),
            name: 'isUploadServer',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(13, 8748831353225298135),
            name: 'dateInsert',
            type: 6,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(2, 8118914391823614089),
      name: 'TrudaAicEntity',
      lastPropertyId: const IdUid(17, 8782834569161307899),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 7143112715468219622),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 6264949964418937317),
            name: 'extra',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 4975246918118719865),
            name: 'callCardCount',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 6910856567433320521),
            name: 'aicId',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 8981597364239371360),
            name: 'isOnline',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 643129062091801557),
            name: 'muteStatus',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 2342280816114485242),
            name: 'isCard',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 3141153890180185748),
            name: 'propDuration',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 5306730588659629226),
            name: 'isFollowed',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 5345566632857786702),
            name: 'nickname',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 3172123871376088454),
            name: 'filename',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 1702486771257778934),
            name: 'portrait',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(13, 7113558965270985163),
            name: 'localPath',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(14, 8288022627910098128),
            name: 'userId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(15, 8741775511956086600),
            name: 'dateInsert',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(16, 4322604511740578676),
            name: 'playState',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(17, 8782834569161307899),
            name: 'rawData',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(3, 5604083892956884505),
      name: 'TrudaCallEntity',
      lastPropertyId: const IdUid(11, 7266139082166574271),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2641424417831606556),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 5095819207997889598),
            name: 'dateInsert',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 7412495029810994013),
            name: 'channelId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 3916426887976057168),
            name: 'myId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 4647281218791161677),
            name: 'herId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 6821628685001527556),
            name: 'herVirtualId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 1494552420134524675),
            name: 'groupId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 2753514954859886965),
            name: 'callType',
            type: 2,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 5327481122409934852),
            name: 'callStatus',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 7677557061164833212),
            name: 'duration',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 7266139082166574271),
            name: 'extra',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(4, 125843660806084294),
      name: 'TrudaConversationEntity',
      lastPropertyId: const IdUid(13, 123085008679097715),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 5091614405070868748),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 2564899723937920746),
            name: 'dateInsert',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 6195028589296146873),
            name: 'msgId',
            type: 9,
            flags: 2080,
            indexId: const IdUid(1, 5788284007238431499)),
        ModelProperty(
            id: const IdUid(4, 2810017047602598624),
            name: 'myId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 1081332848614509218),
            name: 'herId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 2289142493297846751),
            name: 'groupId',
            type: 9,
            flags: 2080,
            indexId: const IdUid(2, 2144574539597997996)),
        ModelProperty(
            id: const IdUid(7, 3576594327179150861),
            name: 'sendType',
            type: 2,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 3905913732179587386),
            name: 'sendState',
            type: 2,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 6925201724276477089),
            name: 'unReadQuality',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 8412939545608074336),
            name: 'top',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 6622370315137490666),
            name: 'content',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 756620765733580784),
            name: 'lastMsgType',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(13, 123085008679097715),
            name: 'rawData',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(5, 6048106847533876611),
      name: 'TrudaHerEntity',
      lastPropertyId: const IdUid(5, 1584457970257929326),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 6912151501688369116),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 7874099289435378045),
            name: 'uid',
            type: 9,
            flags: 2080,
            indexId: const IdUid(3, 6618365412498658621)),
        ModelProperty(
            id: const IdUid(3, 5749557295475279866),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 3940987237106901650),
            name: 'portrait',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 1584457970257929326),
            name: 'date',
            type: 10,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(6, 4337628684584240603),
      name: 'TrudaMsgEntity',
      lastPropertyId: const IdUid(13, 5891861027157683697),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 5019897548950007058),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 5352370631074539375),
            name: 'dateInsert',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 3890339691778210629),
            name: 'msgId',
            type: 9,
            flags: 2080,
            indexId: const IdUid(4, 943818944054675991)),
        ModelProperty(
            id: const IdUid(4, 3084552477991976560),
            name: 'myId',
            type: 9,
            flags: 2048,
            indexId: const IdUid(5, 4750468883458362259)),
        ModelProperty(
            id: const IdUid(5, 3866301234666901347),
            name: 'herId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 2232171376636144193),
            name: 'groupId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 2344209803581760346),
            name: 'sendType',
            type: 2,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 3466909513836170564),
            name: 'sendState',
            type: 2,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 3999992643843121524),
            name: 'readState',
            type: 2,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 3716848422884864276),
            name: 'msgType',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 7434647585219050739),
            name: 'content',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 617806596178276628),
            name: 'extra',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(13, 5891861027157683697),
            name: 'rawData',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(6, 4337628684584240603),
      lastIndexId: const IdUid(5, 4750468883458362259),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    NewHitaOrderEntity: EntityDefinition<NewHitaOrderEntity>(
        model: _entities[0],
        toOneRelations: (NewHitaOrderEntity object) => [],
        toManyRelations: (NewHitaOrderEntity object) => {},
        getId: (NewHitaOrderEntity object) => object.id,
        setId: (NewHitaOrderEntity object, int id) {
          object.id = id;
        },
        objectToFB: (NewHitaOrderEntity object, fb.Builder fbb) {
          final userIdOffset =
              object.userId == null ? null : fbb.writeString(object.userId!);
          final orderNoOffset =
              object.orderNo == null ? null : fbb.writeString(object.orderNo!);
          final productIdOffset = object.productId == null
              ? null
              : fbb.writeString(object.productId!);
          final priceOffset =
              object.price == null ? null : fbb.writeString(object.price!);
          final currencyOffset = object.currency == null
              ? null
              : fbb.writeString(object.currency!);
          final payTypeOffset =
              object.payType == null ? null : fbb.writeString(object.payType!);
          final typeOffset =
              object.type == null ? null : fbb.writeString(object.type!);
          final payTimeOffset =
              object.payTime == null ? null : fbb.writeString(object.payTime!);
          final orderCreateTimeOffset = object.orderCreateTime == null
              ? null
              : fbb.writeString(object.orderCreateTime!);
          fbb.startTable(14);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, userIdOffset);
          fbb.addOffset(2, orderNoOffset);
          fbb.addOffset(3, productIdOffset);
          fbb.addOffset(4, priceOffset);
          fbb.addOffset(5, currencyOffset);
          fbb.addOffset(6, payTypeOffset);
          fbb.addOffset(7, typeOffset);
          fbb.addOffset(8, payTimeOffset);
          fbb.addOffset(9, orderCreateTimeOffset);
          fbb.addInt64(10, object.orderStatus);
          fbb.addBool(11, object.isUploadServer);
          fbb.addInt64(12, object.dateInsert);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = NewHitaOrderEntity(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              userId: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 6),
              orderNo: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8),
              productId: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10),
              price: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12),
              currency: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 14),
              payType: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 16),
              type: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 18),
              payTime:
                  const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 20),
              orderCreateTime: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 22),
              dateInsert: const fb.Int64Reader().vTableGet(buffer, rootOffset, 28, 0))
            ..orderStatus =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 24)
            ..isUploadServer = const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 26);

          return object;
        }),
    TrudaAicEntity: EntityDefinition<TrudaAicEntity>(
        model: _entities[1],
        toOneRelations: (TrudaAicEntity object) => [],
        toManyRelations: (TrudaAicEntity object) => {},
        getId: (TrudaAicEntity object) => object.id,
        setId: (TrudaAicEntity object, int id) {
          object.id = id;
        },
        objectToFB: (TrudaAicEntity object, fb.Builder fbb) {
          final extraOffset =
              object.extra == null ? null : fbb.writeString(object.extra!);
          final nicknameOffset = object.nickname == null
              ? null
              : fbb.writeString(object.nickname!);
          final filenameOffset = object.filename == null
              ? null
              : fbb.writeString(object.filename!);
          final portraitOffset = object.portrait == null
              ? null
              : fbb.writeString(object.portrait!);
          final localPathOffset = object.localPath == null
              ? null
              : fbb.writeString(object.localPath!);
          final userIdOffset =
              object.userId == null ? null : fbb.writeString(object.userId!);
          final rawDataOffset = fbb.writeString(object.rawData);
          fbb.startTable(18);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, extraOffset);
          fbb.addInt64(2, object.callCardCount);
          fbb.addInt64(3, object.aicId);
          fbb.addInt64(4, object.isOnline);
          fbb.addInt64(5, object.muteStatus);
          fbb.addInt64(6, object.isCard);
          fbb.addInt64(7, object.propDuration);
          fbb.addBool(8, object.isFollowed);
          fbb.addOffset(9, nicknameOffset);
          fbb.addOffset(10, filenameOffset);
          fbb.addOffset(11, portraitOffset);
          fbb.addOffset(12, localPathOffset);
          fbb.addOffset(13, userIdOffset);
          fbb.addInt64(14, object.dateInsert);
          fbb.addInt64(15, object.playState);
          fbb.addOffset(16, rawDataOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = TrudaAicEntity(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 32, 0),
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0))
            ..extra = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 6)
            ..callCardCount =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 8)
            ..aicId =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 10)
            ..isOnline =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 12)
            ..muteStatus =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 14)
            ..isCard =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 16)
            ..propDuration =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 18)
            ..isFollowed =
                const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 20)
            ..nickname = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 22)
            ..filename = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 24)
            ..portrait = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 26)
            ..localPath = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 28)
            ..userId = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 30)
            ..playState =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 34, 0)
            ..rawData = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 36, '');

          return object;
        }),
    TrudaCallEntity: EntityDefinition<TrudaCallEntity>(
        model: _entities[2],
        toOneRelations: (TrudaCallEntity object) => [],
        toManyRelations: (TrudaCallEntity object) => {},
        getId: (TrudaCallEntity object) => object.id,
        setId: (TrudaCallEntity object, int id) {
          object.id = id;
        },
        objectToFB: (TrudaCallEntity object, fb.Builder fbb) {
          final channelIdOffset = fbb.writeString(object.channelId);
          final myIdOffset = fbb.writeString(object.myId);
          final herIdOffset = fbb.writeString(object.herId);
          final herVirtualIdOffset = fbb.writeString(object.herVirtualId);
          final groupIdOffset = fbb.writeString(object.groupId);
          final durationOffset = fbb.writeString(object.duration);
          final extraOffset = fbb.writeString(object.extra);
          fbb.startTable(12);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.dateInsert);
          fbb.addOffset(2, channelIdOffset);
          fbb.addOffset(3, myIdOffset);
          fbb.addOffset(4, herIdOffset);
          fbb.addOffset(5, herVirtualIdOffset);
          fbb.addOffset(6, groupIdOffset);
          fbb.addInt8(7, object.callType);
          fbb.addInt64(8, object.callStatus);
          fbb.addOffset(9, durationOffset);
          fbb.addOffset(10, extraOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = TrudaCallEntity(
              myId: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              herId: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, ''),
              herVirtualId: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, ''),
              channelId: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              callType:
                  const fb.Int8Reader().vTableGet(buffer, rootOffset, 18, 0),
              callStatus:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 20, 0),
              dateInsert:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0),
              duration: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 22, ''),
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              extra:
                  const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 24, ''))
            ..groupId = const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 16, '');

          return object;
        }),
    TrudaConversationEntity: EntityDefinition<TrudaConversationEntity>(
        model: _entities[3],
        toOneRelations: (TrudaConversationEntity object) => [],
        toManyRelations: (TrudaConversationEntity object) => {},
        getId: (TrudaConversationEntity object) => object.id,
        setId: (TrudaConversationEntity object, int id) {
          object.id = id;
        },
        objectToFB: (TrudaConversationEntity object, fb.Builder fbb) {
          final msgIdOffset = fbb.writeString(object.msgId);
          final myIdOffset = fbb.writeString(object.myId);
          final herIdOffset = fbb.writeString(object.herId);
          final groupIdOffset = fbb.writeString(object.groupId);
          final contentOffset = fbb.writeString(object.content);
          final rawDataOffset = fbb.writeString(object.rawData);
          fbb.startTable(14);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.dateInsert);
          fbb.addOffset(2, msgIdOffset);
          fbb.addOffset(3, myIdOffset);
          fbb.addOffset(4, herIdOffset);
          fbb.addOffset(5, groupIdOffset);
          fbb.addInt8(6, object.sendType);
          fbb.addInt8(7, object.sendState);
          fbb.addInt64(8, object.unReadQuality);
          fbb.addInt64(9, object.top);
          fbb.addOffset(10, contentOffset);
          fbb.addInt64(11, object.lastMsgType);
          fbb.addOffset(12, rawDataOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = TrudaConversationEntity(
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, ''),
              const fb.Int8Reader().vTableGet(buffer, rootOffset, 16, 0),
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 24, ''),
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0),
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 28, ''),
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              lastMsgType:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 26, 0),
              sendState:
                  const fb.Int8Reader().vTableGet(buffer, rootOffset, 18, 0),
              unReadQuality:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 20, 0),
              top: const fb.Int64Reader().vTableGet(buffer, rootOffset, 22, 0))
            ..msgId = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 8, '')
            ..groupId = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 14, '');

          return object;
        }),
    TrudaHerEntity: EntityDefinition<TrudaHerEntity>(
        model: _entities[4],
        toOneRelations: (TrudaHerEntity object) => [],
        toManyRelations: (TrudaHerEntity object) => {},
        getId: (TrudaHerEntity object) => object.id,
        setId: (TrudaHerEntity object, int id) {
          object.id = id;
        },
        objectToFB: (TrudaHerEntity object, fb.Builder fbb) {
          final uidOffset = fbb.writeString(object.uid);
          final nameOffset = fbb.writeString(object.name);
          final portraitOffset = object.portrait == null
              ? null
              : fbb.writeString(object.portrait!);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, uidOffset);
          fbb.addOffset(2, nameOffset);
          fbb.addOffset(3, portraitOffset);
          fbb.addInt64(4, object.date.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = TrudaHerEntity(
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              portrait: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10),
              date: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0)));

          return object;
        }),
    TrudaMsgEntity: EntityDefinition<TrudaMsgEntity>(
        model: _entities[5],
        toOneRelations: (TrudaMsgEntity object) => [],
        toManyRelations: (TrudaMsgEntity object) => {},
        getId: (TrudaMsgEntity object) => object.id,
        setId: (TrudaMsgEntity object, int id) {
          object.id = id;
        },
        objectToFB: (TrudaMsgEntity object, fb.Builder fbb) {
          final msgIdOffset = fbb.writeString(object.msgId);
          final myIdOffset = fbb.writeString(object.myId);
          final herIdOffset = fbb.writeString(object.herId);
          final groupIdOffset = fbb.writeString(object.groupId);
          final contentOffset = fbb.writeString(object.content);
          final extraOffset =
              object.extra == null ? null : fbb.writeString(object.extra!);
          final rawDataOffset = fbb.writeString(object.rawData);
          fbb.startTable(14);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.dateInsert);
          fbb.addOffset(2, msgIdOffset);
          fbb.addOffset(3, myIdOffset);
          fbb.addOffset(4, herIdOffset);
          fbb.addOffset(5, groupIdOffset);
          fbb.addInt8(6, object.sendType);
          fbb.addInt8(7, object.sendState);
          fbb.addInt8(8, object.readState);
          fbb.addInt64(9, object.msgType);
          fbb.addOffset(10, contentOffset);
          fbb.addOffset(11, extraOffset);
          fbb.addOffset(12, rawDataOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = TrudaMsgEntity(
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, ''),
              const fb.Int8Reader().vTableGet(buffer, rootOffset, 16, 0),
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 24, ''),
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0),
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 28, ''),
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 22, 0),
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              sendState:
                  const fb.Int8Reader().vTableGet(buffer, rootOffset, 18, 0),
              readState:
                  const fb.Int8Reader().vTableGet(buffer, rootOffset, 20, 0))
            ..msgId = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 8, '')
            ..groupId = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 14, '')
            ..extra = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 26);

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [NewHitaOrderEntity] entity fields to define ObjectBox queries.
class NewHitaOrderEntity_ {
  /// see [NewHitaOrderEntity.id]
  static final id =
      QueryIntegerProperty<NewHitaOrderEntity>(_entities[0].properties[0]);

  /// see [NewHitaOrderEntity.userId]
  static final userId =
      QueryStringProperty<NewHitaOrderEntity>(_entities[0].properties[1]);

  /// see [NewHitaOrderEntity.orderNo]
  static final orderNo =
      QueryStringProperty<NewHitaOrderEntity>(_entities[0].properties[2]);

  /// see [NewHitaOrderEntity.productId]
  static final productId =
      QueryStringProperty<NewHitaOrderEntity>(_entities[0].properties[3]);

  /// see [NewHitaOrderEntity.price]
  static final price =
      QueryStringProperty<NewHitaOrderEntity>(_entities[0].properties[4]);

  /// see [NewHitaOrderEntity.currency]
  static final currency =
      QueryStringProperty<NewHitaOrderEntity>(_entities[0].properties[5]);

  /// see [NewHitaOrderEntity.payType]
  static final payType =
      QueryStringProperty<NewHitaOrderEntity>(_entities[0].properties[6]);

  /// see [NewHitaOrderEntity.type]
  static final type =
      QueryStringProperty<NewHitaOrderEntity>(_entities[0].properties[7]);

  /// see [NewHitaOrderEntity.payTime]
  static final payTime =
      QueryStringProperty<NewHitaOrderEntity>(_entities[0].properties[8]);

  /// see [NewHitaOrderEntity.orderCreateTime]
  static final orderCreateTime =
      QueryStringProperty<NewHitaOrderEntity>(_entities[0].properties[9]);

  /// see [NewHitaOrderEntity.orderStatus]
  static final orderStatus =
      QueryIntegerProperty<NewHitaOrderEntity>(_entities[0].properties[10]);

  /// see [NewHitaOrderEntity.isUploadServer]
  static final isUploadServer =
      QueryBooleanProperty<NewHitaOrderEntity>(_entities[0].properties[11]);

  /// see [NewHitaOrderEntity.dateInsert]
  static final dateInsert =
      QueryIntegerProperty<NewHitaOrderEntity>(_entities[0].properties[12]);
}

/// [TrudaAicEntity] entity fields to define ObjectBox queries.
class TrudaAicEntity_ {
  /// see [TrudaAicEntity.id]
  static final id =
      QueryIntegerProperty<TrudaAicEntity>(_entities[1].properties[0]);

  /// see [TrudaAicEntity.extra]
  static final extra =
      QueryStringProperty<TrudaAicEntity>(_entities[1].properties[1]);

  /// see [TrudaAicEntity.callCardCount]
  static final callCardCount =
      QueryIntegerProperty<TrudaAicEntity>(_entities[1].properties[2]);

  /// see [TrudaAicEntity.aicId]
  static final aicId =
      QueryIntegerProperty<TrudaAicEntity>(_entities[1].properties[3]);

  /// see [TrudaAicEntity.isOnline]
  static final isOnline =
      QueryIntegerProperty<TrudaAicEntity>(_entities[1].properties[4]);

  /// see [TrudaAicEntity.muteStatus]
  static final muteStatus =
      QueryIntegerProperty<TrudaAicEntity>(_entities[1].properties[5]);

  /// see [TrudaAicEntity.isCard]
  static final isCard =
      QueryIntegerProperty<TrudaAicEntity>(_entities[1].properties[6]);

  /// see [TrudaAicEntity.propDuration]
  static final propDuration =
      QueryIntegerProperty<TrudaAicEntity>(_entities[1].properties[7]);

  /// see [TrudaAicEntity.isFollowed]
  static final isFollowed =
      QueryBooleanProperty<TrudaAicEntity>(_entities[1].properties[8]);

  /// see [TrudaAicEntity.nickname]
  static final nickname =
      QueryStringProperty<TrudaAicEntity>(_entities[1].properties[9]);

  /// see [TrudaAicEntity.filename]
  static final filename =
      QueryStringProperty<TrudaAicEntity>(_entities[1].properties[10]);

  /// see [TrudaAicEntity.portrait]
  static final portrait =
      QueryStringProperty<TrudaAicEntity>(_entities[1].properties[11]);

  /// see [TrudaAicEntity.localPath]
  static final localPath =
      QueryStringProperty<TrudaAicEntity>(_entities[1].properties[12]);

  /// see [TrudaAicEntity.userId]
  static final userId =
      QueryStringProperty<TrudaAicEntity>(_entities[1].properties[13]);

  /// see [TrudaAicEntity.dateInsert]
  static final dateInsert =
      QueryIntegerProperty<TrudaAicEntity>(_entities[1].properties[14]);

  /// see [TrudaAicEntity.playState]
  static final playState =
      QueryIntegerProperty<TrudaAicEntity>(_entities[1].properties[15]);

  /// see [TrudaAicEntity.rawData]
  static final rawData =
      QueryStringProperty<TrudaAicEntity>(_entities[1].properties[16]);
}

/// [TrudaCallEntity] entity fields to define ObjectBox queries.
class TrudaCallEntity_ {
  /// see [TrudaCallEntity.id]
  static final id =
      QueryIntegerProperty<TrudaCallEntity>(_entities[2].properties[0]);

  /// see [TrudaCallEntity.dateInsert]
  static final dateInsert =
      QueryIntegerProperty<TrudaCallEntity>(_entities[2].properties[1]);

  /// see [TrudaCallEntity.channelId]
  static final channelId =
      QueryStringProperty<TrudaCallEntity>(_entities[2].properties[2]);

  /// see [TrudaCallEntity.myId]
  static final myId =
      QueryStringProperty<TrudaCallEntity>(_entities[2].properties[3]);

  /// see [TrudaCallEntity.herId]
  static final herId =
      QueryStringProperty<TrudaCallEntity>(_entities[2].properties[4]);

  /// see [TrudaCallEntity.herVirtualId]
  static final herVirtualId =
      QueryStringProperty<TrudaCallEntity>(_entities[2].properties[5]);

  /// see [TrudaCallEntity.groupId]
  static final groupId =
      QueryStringProperty<TrudaCallEntity>(_entities[2].properties[6]);

  /// see [TrudaCallEntity.callType]
  static final callType =
      QueryIntegerProperty<TrudaCallEntity>(_entities[2].properties[7]);

  /// see [TrudaCallEntity.callStatus]
  static final callStatus =
      QueryIntegerProperty<TrudaCallEntity>(_entities[2].properties[8]);

  /// see [TrudaCallEntity.duration]
  static final duration =
      QueryStringProperty<TrudaCallEntity>(_entities[2].properties[9]);

  /// see [TrudaCallEntity.extra]
  static final extra =
      QueryStringProperty<TrudaCallEntity>(_entities[2].properties[10]);
}

/// [TrudaConversationEntity] entity fields to define ObjectBox queries.
class TrudaConversationEntity_ {
  /// see [TrudaConversationEntity.id]
  static final id =
      QueryIntegerProperty<TrudaConversationEntity>(_entities[3].properties[0]);

  /// see [TrudaConversationEntity.dateInsert]
  static final dateInsert =
      QueryIntegerProperty<TrudaConversationEntity>(_entities[3].properties[1]);

  /// see [TrudaConversationEntity.msgId]
  static final msgId =
      QueryStringProperty<TrudaConversationEntity>(_entities[3].properties[2]);

  /// see [TrudaConversationEntity.myId]
  static final myId =
      QueryStringProperty<TrudaConversationEntity>(_entities[3].properties[3]);

  /// see [TrudaConversationEntity.herId]
  static final herId =
      QueryStringProperty<TrudaConversationEntity>(_entities[3].properties[4]);

  /// see [TrudaConversationEntity.groupId]
  static final groupId =
      QueryStringProperty<TrudaConversationEntity>(_entities[3].properties[5]);

  /// see [TrudaConversationEntity.sendType]
  static final sendType =
      QueryIntegerProperty<TrudaConversationEntity>(_entities[3].properties[6]);

  /// see [TrudaConversationEntity.sendState]
  static final sendState =
      QueryIntegerProperty<TrudaConversationEntity>(_entities[3].properties[7]);

  /// see [TrudaConversationEntity.unReadQuality]
  static final unReadQuality =
      QueryIntegerProperty<TrudaConversationEntity>(_entities[3].properties[8]);

  /// see [TrudaConversationEntity.top]
  static final top =
      QueryIntegerProperty<TrudaConversationEntity>(_entities[3].properties[9]);

  /// see [TrudaConversationEntity.content]
  static final content =
      QueryStringProperty<TrudaConversationEntity>(_entities[3].properties[10]);

  /// see [TrudaConversationEntity.lastMsgType]
  static final lastMsgType = QueryIntegerProperty<TrudaConversationEntity>(
      _entities[3].properties[11]);

  /// see [TrudaConversationEntity.rawData]
  static final rawData =
      QueryStringProperty<TrudaConversationEntity>(_entities[3].properties[12]);
}

/// [TrudaHerEntity] entity fields to define ObjectBox queries.
class TrudaHerEntity_ {
  /// see [TrudaHerEntity.id]
  static final id =
      QueryIntegerProperty<TrudaHerEntity>(_entities[4].properties[0]);

  /// see [TrudaHerEntity.uid]
  static final uid =
      QueryStringProperty<TrudaHerEntity>(_entities[4].properties[1]);

  /// see [TrudaHerEntity.name]
  static final name =
      QueryStringProperty<TrudaHerEntity>(_entities[4].properties[2]);

  /// see [TrudaHerEntity.portrait]
  static final portrait =
      QueryStringProperty<TrudaHerEntity>(_entities[4].properties[3]);

  /// see [TrudaHerEntity.date]
  static final date =
      QueryIntegerProperty<TrudaHerEntity>(_entities[4].properties[4]);
}

/// [TrudaMsgEntity] entity fields to define ObjectBox queries.
class TrudaMsgEntity_ {
  /// see [TrudaMsgEntity.id]
  static final id =
      QueryIntegerProperty<TrudaMsgEntity>(_entities[5].properties[0]);

  /// see [TrudaMsgEntity.dateInsert]
  static final dateInsert =
      QueryIntegerProperty<TrudaMsgEntity>(_entities[5].properties[1]);

  /// see [TrudaMsgEntity.msgId]
  static final msgId =
      QueryStringProperty<TrudaMsgEntity>(_entities[5].properties[2]);

  /// see [TrudaMsgEntity.myId]
  static final myId =
      QueryStringProperty<TrudaMsgEntity>(_entities[5].properties[3]);

  /// see [TrudaMsgEntity.herId]
  static final herId =
      QueryStringProperty<TrudaMsgEntity>(_entities[5].properties[4]);

  /// see [TrudaMsgEntity.groupId]
  static final groupId =
      QueryStringProperty<TrudaMsgEntity>(_entities[5].properties[5]);

  /// see [TrudaMsgEntity.sendType]
  static final sendType =
      QueryIntegerProperty<TrudaMsgEntity>(_entities[5].properties[6]);

  /// see [TrudaMsgEntity.sendState]
  static final sendState =
      QueryIntegerProperty<TrudaMsgEntity>(_entities[5].properties[7]);

  /// see [TrudaMsgEntity.readState]
  static final readState =
      QueryIntegerProperty<TrudaMsgEntity>(_entities[5].properties[8]);

  /// see [TrudaMsgEntity.msgType]
  static final msgType =
      QueryIntegerProperty<TrudaMsgEntity>(_entities[5].properties[9]);

  /// see [TrudaMsgEntity.content]
  static final content =
      QueryStringProperty<TrudaMsgEntity>(_entities[5].properties[10]);

  /// see [TrudaMsgEntity.extra]
  static final extra =
      QueryStringProperty<TrudaMsgEntity>(_entities[5].properties[11]);

  /// see [TrudaMsgEntity.rawData]
  static final rawData =
      QueryStringProperty<TrudaMsgEntity>(_entities[5].properties[12]);
}
